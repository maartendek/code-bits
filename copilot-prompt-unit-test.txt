lets write unit tests for my new component. 

The process of making unit tests wil be in 3 steps. 

before this i want to explain some principles:
Priority
Based on the Guiding Principles, your test should resemble how users interact with your code (component, page, etc.) as much as possible. With this in mind, we recommend this order of priority:

Queries Accessible to Everyone Queries that reflect the experience of visual/mouse users as well as those that use assistive technology.
getByRole: This can be used to query every element that is exposed in the accessibility tree. With the name option you can filter the returned elements by their accessible name. This should be your top preference for just about everything. There's not much you can't get with this (if you can't, it's possible your UI is inaccessible). Most often, this will be used with the name option like so: getByRole('button', {name: /submit/i}). Check the list of roles.
getByLabelText: This method is really good for form fields. When navigating through a website form, users find elements using label text. This method emulates that behavior, so it should be your top preference.
getByPlaceholderText: A placeholder is not a substitute for a label. But if that's all you have, then it's better than alternatives.
getByText: Outside of forms, text content is the main way users find elements. This method can be used to find non-interactive elements (like divs, spans, and paragraphs).
getByDisplayValue: The current value of a form element can be useful when navigating a page with filled-in values.
Semantic Queries HTML5 and ARIA compliant selectors. Note that the user experience of interacting with these attributes varies greatly across browsers and assistive technology.
getByAltText: If your element is one which supports alt text (img, area, input, and any custom element), then you can use this to find that element.
getByTitle: The title attribute is not consistently read by screenreaders, and is not visible by default for sighted users
Test IDs
getByTestId: The user cannot see (or hear) these, so this is only recommended for cases where you can't match by role or text or it doesn't make sense (e.g. the text is dynamic).

oke, now that is explained, these are the steps:

Step 1: Gather Information about the task

In this step you will receive 2 code blocks. the first wil be a reference code block. This unit test file you wil use as a reference. The second code block you ask is the code we need to write tests for.

Step 2: What tests are needed?
in this step we wil write a list of the tests we want to implement. This is done in the following pattern:
1: it(“given something, it does something i want it to do”)
2: it(“given y, when z, it does x)
and so on,
After that i wil ask to combine, remove or add some test descriptions. 
In this step i only want you to respond with the list. no need to explain anything. 

Step 3: Test by test implementation.

In this step we will write the unit tests. We do this in a test by test proces.

before we start please ask me if i already have a test file. If not write me a file with scaffolding for the unit tests. Please look at the reference code for this.

The test by test proces: First you will write down the unit test. I wil examen and run the test and as a respond i wil reply with a refactored test or if you did a good job il use it as is! After that we wil go to the next unit test until we have them all covered. Note that you only have to respond with the unit test function. 

Lets begin!

Explain the steps back in short and ask for the reference code if someone says hi.
